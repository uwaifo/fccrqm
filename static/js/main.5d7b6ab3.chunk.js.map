{"version":3,"sources":["components/QuoteMachine.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","_ref","newQuoteIndex","selectedQuote","react_default","a","createElement","Card_default","CardContent_default","Typography_default","id","variant","gutterBottom","class","concat","quote","author","CardActions_default","Button_default","color","size","onClick","IconButton_default","target","href","encodeURI","index_es","icon","faTwitter","Footer","Link_default","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","generateNewQuoteIndex","bind","assertThisInitialized","_this2","fetch","then","data","json","setState","length","random","console","log","Grid_default","className","classes","container","justify","xs","lg","item","components_QuoteMachine","Number","isInteger","Component","withStyles","alignItems","display","height","footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d7b6ab3.chunk.js","sourcesContent":["import React from \"react\";\n//import Button from \"./Button\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nconst QuoteMachine = ({ newQuoteIndex, selectedQuote }) => (\n  <Card>\n    <CardContent>\n      <Typography id=\"text\" variant=\"h5\" gutterBottom>\n        <i class=\"fa fa-quote-left\">{`\"${selectedQuote.quote}\"`}</i>\n        <br />\n        <br /> - <span id=\"author\">{selectedQuote.author}</span>\n      </Typography>\n      <CardActions>\n        <Button\n          id=\"new-quote\"\n          color=\"secondary\"\n          variant=\"contained\"\n          size=\"small\"\n          onClick={newQuoteIndex}\n        >\n          Next Quote\n        </Button>\n\n        <IconButton\n          id=\"tweet-quote\"\n          target=\"_blank\"\n          href={encodeURI(\n            `https://twitter.com/intent/tweet?text=${\n              selectedQuote.quote\n            }&hashtags=thewebdevcoach`\n          )}\n        >\n          <FontAwesomeIcon icon={faTwitter} size=\"md\" />\n        </IconButton>\n      </CardActions>\n    </CardContent>\n  </Card>\n);\nexport default QuoteMachine;\n","import React from \"react\";\nimport Link from \"@material-ui/core/Link\";\n\nexport default function Footer() {\n  return (\n    <div>\n      <Link href=\"https://github.com/uwaifo\" variant=\"body1\">\n        Designed by OverstandApps\n      </Link>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport QuoteMachine from \"./components/QuoteMachine\";\nimport { random } from \"lodash\";\nimport \"typeface-roboto\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core\";\nimport Footer from \"./components/Footer\";\nclass App extends Component {\n  //initialize state in the class constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [],\n      selectedQuote: null\n    };\n    this.generateNewQuoteIndex = this.generateNewQuoteIndex.bind(this);\n    this.newQuoteIndex = this.newQuoteIndex.bind(this);\n  }\n  // this is the most appropriate lifecycle method for fetching external data\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\"\n    )\n      .then(data => data.json())\n      .then(data => this.setState({ quotes: data }, this.newQuoteIndex));\n  }\n\n  get selectedQuote() {\n    if (\n      !this.state.quotes.length ||\n      !Number.isInteger(this.state.selectedQuote)\n    ) {\n      return undefined;\n    }\n    return this.state.quotes[this.state.selectedQuote];\n  }\n\n  generateNewQuoteIndex() {\n    if (!this.state.quotes.length) {\n      return undefined;\n    }\n    return random(0, this.state.quotes.length - 1);\n  }\n\n  newQuoteIndex() {\n    this.setState({ selectedQuote: this.generateNewQuoteIndex() });\n  }\n\n  nxtQuoteClickHandler() {\n    console.log(\"clicked\");\n  }\n\n  render() {\n    console.log(this.state.selectedQuote);\n    return (\n      <Grid\n        className={this.props.classes.container}\n        id=\"quote-box\"\n        justify=\"center\"\n        container\n      >\n        <Grid xs={11} lg={8} item>\n          {this.selectedQuote ? (\n            <QuoteMachine\n              selectedQuote={this.selectedQuote}\n              newQuoteIndex={this.newQuoteIndex}\n            />\n          ) : null}\n          <Footer />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n//\nconst styles = {\n  container: {\n    alignItems: \"center\",\n    display: \"flex\",\n    height: \"100vh\"\n  },\n  footer: {\n    alignItems: \"center\",\n    display: \"flex\",\n    height: \"10vh\"\n  }\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}